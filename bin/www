#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require("../app");
let open = require("open");
let fs = require("fs");
let debug = require("debug")("blog:server");
let http = require("http");
let https = require("https");
const log4js = require("../service/log4js-service");
/**
 * Get port from environment and store in Express.
 */
var options = {
    key  : fs.readFileSync('./cert/214593159680478.key'),
    cert : fs.readFileSync('./cert/214593159680478.pem')
}
let port = normalizePort(process.env.PORT || "443");
app.set("port", port);

/**
 * Create HTTP server.
 */

let server = https.createServer(options,app);
// let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
    // named pipe
        return val;
    }

    if (port >= 0) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    log4js.getLogger("errorLog").error(error);
    if (error.syscall !== "listen") {
        throw error;
    }

    let bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
    case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
    log4js.getLogger("accessLog").log("Listening on " + bind);
}
